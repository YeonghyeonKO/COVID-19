knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(nls2)
library(segmented)
setwd("C:\\Users\\1234\\Desktop\\고영현\\수업\\2020년\\2020-1\\회귀분석 및 실습\\실습 및 과제\\코로나 실습")
COVID_19 <- read.csv("COVID-19 Cases.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(nls2)
library(segmented)
setwd("C:\\Users\\1234\\Desktop\\고영현\\수업\\2020년\\2020-1\\회귀분석 및 실습\\실습 및 과제\\코로나 실습")
COVID_19 <- read.csv("COVID-19 Cases.csv")
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(nls2)
library(segmented)
setwd("C:\\Users\\1234\\Desktop\\고영현\\수업\\2020년\\2020-1\\회귀분석 및 실습\\실습 및 과제\\코로나 실습")
COVID_19 <- read.csv("COVID-19 Cases.csv")
View(COVID_19)
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(nls2)
library(segmented)
setwd("C:\\Users\\1234\\Desktop\\고영현\\수업\\2020년\\2020-1\\회귀분석 및 실습\\실습 및 과제\\코로나 실습")
COVID_19 <- read.csv("COVID-19 Cases.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(nls2)
library(segmented)
setwd("C:\\Users\\1234\\Desktop\\고영현\\수업\\2020년\\2020-1\\회귀분석 및 실습\\실습 및 과제\\코로나 실습")
COVID_19 <- read.csv("COVID-19 Cases.csv")
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
# 신규확진자 구하기
corona <- corona_raw %>%
mutate(Date = as.Date(corona_raw$Date, '%m/%d/%Y')) %>%
filter(Case_Type == "Confirmed") %>%
arrange(Country_Region, Date) %>%
mutate(Days_after_First_Case = rep(0:133, 187),
Difference = Cases - lag(Cases, n = 1, default = 0))
# difference 끝지점 예외 처리
for(i in 0:186){
corona$Difference[134*i + 1] = corona$Cases[134*i + 1]
}
Brazil <- corona %>%
filter(Country_Region == "Brazil") %>%
slice(1:131)
# 확진자가 출현했을 시점부터
Brazil <- Brazil[Brazil$Cases!=0,]
# 2월 26일부터 4월 19일까지의 데이터를 training set
# 4월 20일부터 5월 31일까지의 데이터를 validation set
Brazil_train <- Brazil[1:54,]; Brazil_valid <- Brazil[55:96,]
# 필요한 col뽑기
corona_raw <- COVID_19 %>%
select(1, 3:5, 7) %>%
rename(Case_Type = 癤풠ase_Type) %>%
group_by(Country_Region, Date, Case_Type) %>%
summarise(Cases = sum(Cases)) %>%
ungroup()
# 신규확진자 구하기
corona <- corona_raw %>%
mutate(Date = as.Date(corona_raw$Date, '%m/%d/%Y')) %>%
filter(Case_Type == "Confirmed") %>%
arrange(Country_Region, Date) %>%
mutate(Days_after_First_Case = rep(0:133, 187),
Difference = Cases - lag(Cases, n = 1, default = 0))
# difference 끝지점 예외 처리
for(i in 0:186){
corona$Difference[134*i + 1] = corona$Cases[134*i + 1]
}
Brazil <- corona %>%
filter(Country_Region == "Brazil") %>%
slice(1:131)
# 확진자가 출현했을 시점부터
Brazil <- Brazil[Brazil$Cases!=0,]
# 2월 26일부터 4월 19일까지의 데이터를 training set
# 4월 20일부터 5월 31일까지의 데이터를 validation set
Brazil_train <- Brazil[1:54,]; Brazil_valid <- Brazil[55:96,]
X <- Brazil_train$Days_after_First_Case
Y <- Brazil_train$Cases
## 그리드 탐색
grid_Brazil <- data.frame(a = c(max(Y) - 20000, max(Y) + 20000), b = c(-100, 100), c = c(-100, 100))
## Logistic  model
eq_log <- Y ~ a/(1 + exp(b + c*X))
# 초기값 생성
# fit_log_B <- nls2(eq_log, start = grid_Brazil, algorithm = "plinear-random", control = nls.control(maxiter = 3000))
# initial_log_B <- coef(fit_log_B)
initial_log_B <- c(4.610237e+04,  7.795043e+00, -9.751111e-02)
# 초기값을 바탕으로 적합
fit_log_B <- nls(eq_log, start = list(a = initial_log_B[1],
b = initial_log_B[2],
c = initial_log_B[3]))
summary(fit_log_B)
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_log_B)[1] / (1 + exp(coef(fit_log_B)[2] + coef(fit_log_B)[3] * X))),
color = "coral", lwd = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Logistic Model",
x = "From 02/26 To 04/19 in 2020", y = "Cumulative Cases")
## 일별 예측값
X_pred <- Brazil_valid$Days_after_First_Case
Y_pred <- Brazil_valid$Cases
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_log_B)[1] / (1 + exp(coef(fit_log_B)[2] + coef(fit_log_B)[3] * X))),
color = "coral", size = 1.5, alpha = 0.3) +
labs(title = "COVID-19 Cumulative cases in Brazil : Logistic Model",
subtitle = "Predict the cases from 04/20 to 05/31 Based on data from 02/26 to 04/19",
x = "From 02/26 To 05/31 in 2020", y = "Cumulative Cases") +
# 4월 20일부터 5월 31일까지 예측
geom_point(aes(X_pred, Y_pred), shape = 1) +
geom_line(aes(X_pred, coef(fit_log_B)[1] / (1 + exp(coef(fit_log_B)[2] + coef(fit_log_B)[3] * X_pred))),
col = "coral", size = 1, linetype = 6) +
geom_vline(xintercept = 88.5, col = "red", lwd = 1, linetype = 3)
## Bertalanffy model
eq_Ber <- Y ~ a * ((1 - exp((-b) * X))^c)
# 초기값 생성
# fit_Ber_B = nls2(eq_Ber, start = grid_Brazil, algorithm = "plinear-random", control = nls.control(maxiter = 5000))
# initial_Ber_B <- coef(fit_Ber_B)
initial_Ber_B <- c(2.699297e+05, 3.379691e-02, 3.717493e+01)
# 초기값을 바탕으로 적합
fit_Ber_B <- nls(eq_Ber, start = list(a = initial_Ber_B[1],
b = initial_Ber_B[2],
c = initial_Ber_B[3]))
summary(fit_Ber_B)
# 시각화
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X ))^coef(fit_Ber_B)[3])),
color = "blueviolet", lwd = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Bertalanffy Model",
x = "From 02/26 To 04/19 in 2020", y = "Cumulative Cases")
View(grid_Brazil)
## Bertalanffy model
eq_Ber <- Y ~ a * ((1 - exp((-b) * X))^c)
# 초기값 생성
# fit_Ber_B = nls2(eq_Ber, start = grid_Brazil, algorithm = "plinear-random", control = nls.control(maxiter = 5000))
# initial_Ber_B <- coef(fit_Ber_B)
initial_Ber_B <- c(2.699297e+05, 3.379691e-02, 3.717493e+01)
# 초기값을 바탕으로 적합
fit_Ber_B <- nls(eq_Ber, start = list(a = initial_Ber_B[1],
b = initial_Ber_B[2],
c = initial_Ber_B[3]))
summary(fit_Ber_B)
# 시각화
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X ))^coef(fit_Ber_B)[3])),
color = "blueviolet", lwd = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Bertalanffy Model",
x = "From 02/26 To 04/19 in 2020", y = "Cumulative Cases")
## 일별 예측값
X_pred <- Brazil_valid$Days_after_First_Case
Y_pred <- Brazil_valid$Cases
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X ))^coef(fit_Ber_B)[3])),
color = "blueviolet", lwd = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Bertalanffy Model",
subtitle = "Predict the cases from 04/20 to 05/31 Based on data from 02/26 to 04/19",
x = "From 02/26 To 05/31 in 2020", y = "Cumulative Cases") +
# 4월 20일부터 5월 31일까지 예측
geom_point(aes(X_pred, Y_pred), shape = 1) +
geom_line(aes(X_pred, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X_pred))^coef(fit_Ber_B)[3])),
col = "blueviolet", size = 1, linetype = 6) +
geom_vline(xintercept = 88.5, col = "red", lwd = 1, linetype = 3)
## Gompertz model
eq_Gom <- Y ~ a * exp(-b * exp(-c * X))
# 초기값 생성
# fit_Gom_B = nls2(eq_Gom, start = grid_Brazil, algorithm = "plinear-random", control = nls.control(maxiter = 5000))
# initial_Gom_B <- coef(fit_Gom_B)
initial_Gom_B <- c(5.581085e+04, 3.473065e+01, 2.421904e-02)
# 초기값을 바탕으로 적합
fit_Gom_B <- nls(eq_Gom, start = list(a = initial_Gom_B[1],
b = initial_Gom_B[2],
c = initial_Gom_B[3]))
summary(fit_Gom_B)
# 시각화
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_Gom_B)[1] * (exp(-coef(fit_Gom_B)[2] * exp(-coef(fit_Gom_B)[3] * X )))),
color = "darkgreen", size = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Gompertz Model",
x = "From 02/26 To 04/19 in 2020", y = "Cumulative Cases")
## 일별 예측값
X_pred <- Brazil_valid$Days_after_First_Case
Y_pred <- Brazil_valid$Cases
ggplot() +
geom_point(aes(X, Y), shape = 1) +
geom_line(aes(X, coef(fit_Gom_B)[1] * (exp(-coef(fit_Gom_B)[2] * exp(-coef(fit_Gom_B)[3] * X )))),
color = "darkgreen", lwd = 1) +
labs(title = "COVID-19 Cumulative cases in Brazil : Gompertz Model",
subtitle = "Predict the cases from 04/20 to 05/31 Based on data from 02/26 to 04/19",
x = "From 02/26 To 05/31 in 2020", y = "Cumulative Cases") +
# 4월 20일부터 5월 31일까지 예측
geom_point(aes(X_pred, Y_pred), shape = 1) +
geom_line(aes(X_pred, coef(fit_Gom_B)[1] * (exp(-coef(fit_Gom_B)[2] * exp(-coef(fit_Gom_B)[3] * X_pred)))),
col = "darkgreen", size = 1, linetype = 6) +
geom_vline(xintercept = 88.5, col = "red", lwd = 1, linetype = 3)
X_pred <- Brazil_valid$Days_after_First_Case
Y_pred <- Brazil_valid$Cases
Brazil_pred <- Brazil_valid %>%
mutate(Logistic_pred = predict(fit_log_B, data.frame(X = X_pred)),
Ber_pred = predict(fit_Ber_B, data.frame(X = X_pred)),
Gom_pred = predict(fit_Gom_B, data.frame(X = X_pred)))
Brazil_pred %>%
select(2, 4, 7:9)
X <- Brazil_train$Days_after_First_Case
Y <- Brazil_train$Cases
ggplot() +
geom_point(aes(X-34, Y), shape = 1) +
geom_line(aes(X-34, coef(fit_log_B)[1] / (1 + exp(coef(fit_log_B)[2] + coef(fit_log_B)[3] * X))),
color = "coral", size = 1.5, alpha = 0.7) +
geom_line(aes(X-34, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X))^coef(fit_Ber_B)[3])),
color = "blueviolet", size = 1.5, alpha = 0.7) +
geom_line(aes(X-34, coef(fit_Gom_B)[1] * (exp(-coef(fit_Gom_B)[2] * exp(-coef(fit_Gom_B)[3] * X)))),
color = "darkgreen", size = 1.5, alpha = 0.5) +
labs(title = "COVID-19 Cumulative cases in Brazil",
subtitle = "Predict the cases from 04/20 to 05/31 Based on data from 02/26 to 04/19",
x = "From 02/26 To 05/31 in 2020", y = "Cumulative Cases") +
# 4월 20일부터 5월 31일까지 예측
geom_point(aes(X_pred-34, Y_pred), shape = 1) +
geom_vline(xintercept = 88.5-34, col = "red", lwd = 1, linetype = 3) +
# Logistic model
geom_line(aes(X_pred-34, coef(fit_log_B)[1] / (1 + exp(coef(fit_log_B)[2] + coef(fit_log_B)[3] * X_pred))),
col = "coral", size = 1, linetype = 6) +
geom_line(aes(x = 0:5, y = 500000), col = "coral", size = 1) +
geom_text(aes(x = 10, y = 500000, label = "Logistic"), color = "coral") +
# Bertalanffy model
geom_line(aes(X_pred-34, coef(fit_Ber_B)[1] * ((1 - exp(-coef(fit_Ber_B)[2] * X_pred))^coef(fit_Ber_B)[3])),
col = "blueviolet", size = 1, linetype = 6) +
geom_line(aes(x = 0:5, y = 470000), col = "blueviolet", size = 1) +
geom_text(aes(x = 12, y = 470000, label = "Bertalanffy"), color = "blueviolet") +
# Gompertz model
geom_line(aes(X_pred-34, coef(fit_Gom_B)[1] * (exp(-coef(fit_Gom_B)[2] * exp(-coef(fit_Gom_B)[3] * X_pred)))),
col = "darkgreen", size = 1, linetype = 6) +
geom_line(aes(x = 0:5, y = 440000), col = "darkgreen", size = 1) +
geom_text(aes(x = 11, y = 440000, label = "Gompertz"), color = "darkgreen")
## Logistic Model MSE
SSE_log <- sum((Brazil_pred$Cases - Brazil_pred$Logistic_pred)^2)
SST_log <- sum((Brazil_pred$Cases - mean(Brazil_train$Cases))^2)
MSE_log <- SSE_log / length(Brazil_pred$Cases)
## Bertalanffy Model MSE
SSE_Ber <- sum((Brazil_pred$Cases - Brazil_pred$Ber_pred)^2)
SST_Ber <- sum((Brazil_pred$Cases - mean(Brazil_train$Cases))^2)
MSE_Ber <- SSE_Ber / length(Brazil_pred$Cases)
## Gompertz Model MSE
SSE_Gom <- sum((Brazil_pred$Cases - Brazil_pred$Gom_pred)^2)
SST_Gom <- sum((Brazil_pred$Cases - mean(Brazil_train$Cases))^2)
MSE_Gom <- SSE_Gom / length(Brazil_pred$Cases)
cat("(Logistic) MSE : ", MSE_log, "\n")
cat("(Bertalanffy) MSE: ", MSE_Ber, "\n")
cat("(Gompertz) MSE : ", MSE_Gom)
